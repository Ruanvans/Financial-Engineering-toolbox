#include "pch.h"
#include <iostream>
#include <numeric>
#include <cmath>
#include <vector>
#include <algorithm>


using namespace std;

void discount_factor(void) {

	//this method is just a general method to be used for calculating the discount factor

	double interest;
	// time in years
	double time;

	double df;

	cout << "interest rate: ";
	cin >> interest;
	interest = interest / 100;
	cout << "time in years: ";
	cin >> time;


	df = 1 / (pow((1 + interest), time));


	cout.precision(3);
	cout << "discount factor: " << df << endl;
}

void MVH(void) {
	/* this method will be specifically aimed towards the question on the week 3 quiz regarding MVH
	in the question we are given the standard deviation of the prices as percentages and a correlation coefficiant*/

	/* the normal equation for calculating MVH is

			y* = - cov(Ft, Pt)/ var(Ft)

		the method we will use is a bit different as it takes into account the variable we have at hand

	*/
	//the total size of the underlying
	double size_t;
	//size of the future contract
	double size_f;

	// the variances of the prices of both commodities
	// var_A is the variance of the main commodity in this case grape juice
	double var_A;
	double var_B;

	double correlation;

	double MVH;

	cout << "enter total size: ";
	cin >> size_t;

	cout << "enter size of the future contract: ";
	cin >> size_f;


	cout << "enter the variance of A";
	cin >> var_A;
	var_A = var_A / 100;

	cout << "enter the variance of B";
	cin >> var_B;
	var_B = var_B / 100;

	cout << "enter the correlation coefficiant: ";
	cin >> correlation;

	MVH = (size_t / size_f) * correlation * (var_B / var_A);

	MVH = round(MVH);

	cout << "The amount of futures contracts is: " << MVH << endl;

}

void swap_rates(void) {

	int i;
	cout << "enter amount of terms: ";
	cin >>  i;

	double term;
	double disc;


	vector<double> discount;



	for (int j = 0; j < i; j++) {
		cin >> term;
		term = term / 100;
		disc = 1 / pow((1 + term), j+1);
		discount.push_back(disc);

	}

	auto num = 1 - discount.back();
	auto denom = accumulate(discount.begin(), discount.end(), 0.0);

	auto zero_rate = (num / denom) * 100;



	cout << "rate where swap equals zero: " << zero_rate << endl;
}


int main()
{
	swap_rates();
	//discount_factor();
	//MVH();
}
